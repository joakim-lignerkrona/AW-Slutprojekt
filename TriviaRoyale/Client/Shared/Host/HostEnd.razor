@using System.Web;
@using System.Text.Json;
@using TriviaRoyale.Client.Shared.Components
@using TriviaRoyale.Shared;
@using TriviaRoyale.Shared.Questions;
@using TriviaRoyale.Client.Shared.PlayerPage


@inject PlayerService service;
@inject NavigationManager navigation
@inject HostService service


<h2>Result:</h2>

<table class="table table-dark table-striped">
    <thead>

        <tr>
            <th>Position</th>
            <th>Name</th>
            <th>Points</th>
        </tr>
    </thead>
    <tbody>
        @for (int i = 0; i < players.Count; i++)
        {
            var player = players[i];
            <tr>
                <td>@(i + 1)</td>
                <td>@player.Name</td>
                <td>@player.Points</td>
            </tr>
        }
    </tbody>
</table>

@* <button class="btn btn-warning p-5" @onclick="ToElimination">
    <span class="h3">
    Elimination round!
    </span>
    </button>

    <button class="btn btn-warning p-5" @onclick="GameEnded">
    <span class="h3">
    END GAME!
    </span>
    </button>*@
<div class="row">
    <div class="d-flex justify-content-around">

        <button class="btn btn-outline-success p-5" @onclick="NewGame">
            <span class="h3">
                New Game
            </span>
        </button>



    </div>
</div>

@code {
    public List<Question> hardQuestions { get; set; }
    public Question hardQuestion { get; set; }

    List<Player> players;

    public bool winner { get; set; } = false;



    async protected override Task OnInitializedAsync()
    {
        service.OnChange += StateHasChanged;
        players = service.Players.OrderByDescending(p => p.Points).ToList();

        await GetHardQuestions();
        StateHasChanged();

        await base.OnInitializedAsync();
        base.OnInitialized();
    }

    async Task GetHardQuestions()
    {
        string url = navigation.BaseUri + "api/Questions/";
        HttpClient httpClient = new();

        var q = await httpClient.GetAsync(url);
        if (q.IsSuccessStatusCode)
        {
            // Read the response content
            var content = await q.Content.ReadAsStringAsync();
            // Deserialize the content into an object
            var json = JsonSerializer.Deserialize<Question[]>(content);
            hardQuestions = json.ToList();
            StateHasChanged();
        }
    }

    async Task HandleWrongAnswer()
    {
        await service.hubConnection.InvokeAsync("WrongAnswer", service.PlayerAnswering);
    }
    async Task NewGame()
    {
        await service.hubConnection.InvokeAsync("NewGame");
    }
    async Task HandleCorrectAnswer()
    {
        service.PlayerAnswering.Points = +5;
        await service.hubConnection.InvokeAsync("CorrectAnswer", service.PlayerAnswering);
    }
}
