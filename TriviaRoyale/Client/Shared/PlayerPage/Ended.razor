@using System.Web;
@using TriviaRoyale.Client.Shared.Components
@using TriviaRoyale.Shared;
@inject PlayerService service;
@*<style>
	/*h1
	{
		color:red
	}*/

	/*h2
	{
		background-color:aquamarine
		ActiveBorder:10px
		border-radius:12px
	}

	.ram
	{
		border: 2px solid black;
		padding: 10px;
	}*/
</style>*@
@*<p class="ram"></p>*@
@if (winner)
{

	
	<p class="btn btn-success">YOU WIN!</p>
	<p class="btn btn-info">Points: @service.Player.Points</p>


}
else
{
	<p class="btn btn-danger">YOU LOSE </p>
	<p class="btn btn-info">Winner: @players[0].Name  </p>
	<p class="btn btn-info">Winner score: @players[0].Points  </p>
	<p class="btn btn-info">Points: @service.Player.Points</p>

}

<h2>Result:</h2>


<table class="table table-condensed my-table">
	<tr>
		<th>Position</th>
		<th>Name</th>
		<th>Points</th>
	</tr>
	@foreach (var player in service.Players.OrderByDescending(p => p.Points))
	{
		<tr>
			<td>@(i++)</td>
			<td>@player.Emoji @player.Name</td>
			<td>@player.Points</td>
		</tr>
	}

</table>
@code {

	int i = 1;

	List<Player> players;

	public bool winner { get; set; } = false;

	protected override Task OnInitializedAsync()
	{
		players = service.Players.OrderByDescending(p => p.Points).ToList();


		if (service.Player.Name == players.First().Name)
		{
			winner = true;
		}
		else
			winner = false;

		StateHasChanged();

		return base.OnInitializedAsync();
		base.OnInitialized();
	}

}
