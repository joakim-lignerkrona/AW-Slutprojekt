@using System.Globalization;
@using TriviaRoyale.Shared;
@using TriviaRoyale.Client;
@inject NavigationManager Navigation
@inject PlayerService service;




<div class="d-flex flex-column justify-content-center align-items-center" style="height: 100vh;">
    <h1 class="text-light">Create your player</h1>
    <form class="col-lg-7 col-12 col-md-10 bg-light rounded-3 p-4">

        <div>
            <label for="name">Name:</label>
            <input class="form-control mb-2" type="text" id="name" @bind="player.Name" />
        </div>
        <p class="text-danger" style="display:@(ErrorMessageVisibility ? "block" : "none")">Name is required</p>

        <div class="form-group m-3">
            <label for="emoji-category">Select Emoji Category:</label>
            <br>
            <div class="form-check form-check-inline">
                <input class="form-check-input" type="radio" id="people" name="emoji-category" value="people" checked>
                <label class="form-check-label" for="people">People</label>
            </div>
            <div class="form-check form-check-inline">
                <input class="form-check-input" type="radio" id="animals" name="emoji-category" value="animals">
                <label class="form-check-label" for="animals">Animals</label>
            </div>
            <div class="form-check form-check-inline">
                <input class="form-check-input" type="radio" id="food" name="emoji-category" value="food">
                <label class="form-check-label" for="food">Food</label>
            </div>
            <div class="form-check form-check-inline">
                <input class="form-check-input" type="radio" id="activities" name="emoji-category" value="activities">
                <label class="form-check-label" for="activities">Activities</label>
            </div>
        </div>
            <label for="emoji-selector">Select Emoji:</label>
            <br>
        <div class="form-group emoji-selector m-3">


            @for(int i = 0; i < emojis.Length; i++)
            {
                <div class="form-check form-check-inline my-2">
                    <input class="btn-check" type="radio" name="emoji-selector" id=@($"emoji{i}") value=@(i) @onchange="SelectedEmoji">
                    <label class="btn btn-outline-primary" for=@($"emoji{i}")><span class="h1">@emojis[i]</span>   </label>
                </div>
            }

        </div>

        <button class="btn btn-primary p-2" type="submit" @onclick="CreatePlayer" @onclick:preventDefault>READY</button>
    </form>
</div>


@code {
    [Parameter]
    public string RoomID { get; set; }
    private Player player = new Player();
    public int emojiIndex { get; set; } = 0;
    private bool ErrorMessageVisibility { get; set; } = false;
    string[] emojis = new string[] {
"😃", "😉", "🤪", "🤨", "😋", "😏", "😫", "😳",
"🤯", "🫠", "👻", "🤡", "👺", "🤖", "👽", "😺",
"👶", "👧", "👩", "🧑", "👨", "👩‍🦱", "🧑‍🦱", "👨‍🦱",
"🧑‍🦳", "👨‍🦳", "👮", "👷", "💂", "🕵", "🧑‍⚕", "🧑‍🌾",
"🧑‍🍳", "🧑‍🎓", "👩‍🎤", "🧑‍🏫", "🧑‍💻", "🧑‍💼", "🧑‍🔧", "🧑‍🚀",
"👰", "🦸", "🥷", "🦹", "🧝", "🧛", "🐶", "🐱",
"🐭", "🐹", "🐰", "🦊", "🐻", "🐼", "🐻‍❄️", "🐨",
"🐯", "🦁", "🐮", "🐷", "🐸", "🐵", "🍎", "🍐",
"🍊", "🍋", "🍌", "🍉", "🍇", "🍓", "🫐", "🍈",
"🍒", "🍑", "🥭", "🍍", "🥥", "🥝", "🍅", "🍆",
"🥑", "🥦", "🌶️", "🌽", "🥕", "🫒", "🥐", "🥯",
"🥖", "🌭", "🍔", "🍟", "🍕", "🌮", "🌯", "🍣",
"🍤", "🍦", "🎂", "🍫", "🍿", "🍩"};


    private async Task CreatePlayer()
    {

        if (string.IsNullOrEmpty(player.Name))
        {
            ErrorMessageVisibility = true;
            return;
        }
        ErrorMessageVisibility = false;
        player.Name = FixNamingCasing(player.Name);
        player.RoomID = RoomID;

        await service.hubConnection.SendAsync("CreatePlayer", player);

    }
    void SelectedEmoji(ChangeEventArgs arg)
    {
        int index;
        int.TryParse(arg.Value.ToString(), out index);
        Console.WriteLine(emojis[index]);
        player.Emoji = emojis[index];
        StateHasChanged();
    }
    string FixNamingCasing(string name)
    {
        
        char[] chars = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(name.ToLower()).ToCharArray();

        for(int i = 0; i + 1 < chars.Length; i++)
        {
            if((chars[i].Equals('\'')) ||
                (chars[i].Equals('-')))
            {
                chars[i + 1] = Char.ToUpper(chars[i + 1]);
            }
        }
        return new string(chars);
    }
}
