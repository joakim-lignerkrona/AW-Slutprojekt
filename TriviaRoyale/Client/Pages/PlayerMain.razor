@using TriviaRoyale.Client.Shared.Host
@using TriviaRoyale.Client.Shared.PlayerPage
@using TriviaRoyale.Shared;
@page "/Player/{roomID}"
@inject PlayerService service;

<div class="d-flex flex-column justify-content-evenly align-items-center w-100 vh-100 bg-dark text-light">

    @if(service.Player == null)
    {
        <PlayerJoin RoomID="@RoomID" />
    }
    else
    {
        switch(service.GameState)
        {

   
            case GameState.Lobby:
                <Lobby />
                break;
            
            case GameState.Playing:
            case GameState.EliminationRound:
                <Playing />
                break;
            case GameState.PlayerToAnswer:
                <PlayerToAnswer />
                break;
            case GameState.OpponentToAnswer:
                <OpponentToAnswer />
                break;
            case GameState.Ended:
                <Ended />
                break;
            case GameState.EndOrElimination:
                <EndOrElimination />
                break;
            default:
                <PlayerJoin RoomID="roomID" />
                break;
        }
        
    }

</div>


@code {
    [Parameter]
    public string RoomID { get; set; } = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            Console.WriteLine("first render");
            service.RoomID = RoomID;
            await service.ConnectAsync();
            await service.hubConnection.InvokeAsync("JoinRoom", RoomID);

        }
        else if (!service.IsConnected)
        {
            Console.WriteLine("Restoring connection");
            try
            {
            await service.ConnectAsync();

            }
            catch(Exception e)
            {
                Console.WriteLine(e.Message);
            }
        }
        if(service.Player == null)
        {
            Console.WriteLine("check if player exist");
            await service.hubConnection.InvokeAsync("RestorePlayer", RoomID);
        }
        
        await base.OnAfterRenderAsync(firstRender);
    }

    protected override void OnInitialized()
    {
        service.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        service.OnChange -= StateHasChanged;
    }
}
